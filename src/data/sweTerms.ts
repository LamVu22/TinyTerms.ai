import { Topic } from './terms';

export const softwareEngineeringTopic: Topic = {
    id: 'software-engineering',
    name: 'Software Engineering',
    description: 'Building software the right way',
    emoji: '‚öôÔ∏è',
    terms: [
        {
            slug: 'api',
            title: 'API',
            emoji: 'üîå',
            summary: 'A waiter between your app and the kitchen.',
            tags: ['integration', 'communication'],
            one: 'An API is like a waiter that takes your order and brings food from the kitchen.',
            story: "You don't go into a restaurant kitchen to cook. You tell the waiter what you want, they talk to the chef, and bring back your food. APIs work the same way between apps.",
            examples: [
                'Weather app getting temperature data',
                'Login with Google button',
            ],
            grown: 'Application Programming Interface: defined methods for software components to communicate.',
            quiz: [
                { q: 'Do APIs help apps talk to each other?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Do you need to know how the other app works?', options: ['Yes', 'No'], a: 'No' },
                { q: 'Are APIs like waiters?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'debugging',
            title: 'Debugging',
            emoji: 'üêõ',
            summary: 'Finding and fixing broken code like a detective.',
            tags: ['problem-solving', 'development'],
            one: 'Debugging is being a detective to find what\'s making your code act weird.',
            story: "Your car won't start. Is it the battery? Gas? Keys? You check each clue until you find the real problem. Debugging code works exactly the same way.",
            examples: [
                'App crashes when clicking a button',
                'Website loads slowly on mobile phones',
            ],
            grown: 'Systematic process of identifying, isolating, and resolving defects in software.',
            quiz: [
                { q: 'Is debugging like detective work?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Should you guess randomly?', options: ['Yes', 'No'], a: 'No' },
                { q: 'Do you check clues systematically?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'version-control',
            title: 'Version Control',
            emoji: 'üìÇ',
            summary: 'Keeping track of code changes.',
            tags: ['collaboration', 'tools'],
            one: 'Version control is like a time machine for your code.',
            story: 'Imagine writing a book and saving every draft. If you mess up, you can go back to an earlier version. Version control does this for code.',
            examples: [
                'Git for tracking code changes',
                'Reverting to a previous commit',
            ],
            grown: 'A system for managing changes to code, enabling collaboration and history tracking.',
            quiz: [
                { q: 'Does it track code changes?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Can you revert to old versions?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is Git a version control tool?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'unit-testing',
            title: 'Unit Testing',
            emoji: 'üß™',
            summary: 'Testing small pieces of code.',
            tags: ['testing', 'quality'],
            one: 'Unit testing is like checking each Lego piece before building a castle.',
            story: 'Imagine testing each light bulb before putting it in a string of lights. Unit testing ensures each part works before combining them.',
            examples: [
                'Testing a function that adds two numbers',
                'Checking if a login function works',
            ],
            grown: 'A software testing method where individual units of code are tested for correctness.',
            quiz: [
                { q: 'Does it test small pieces of code?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it part of quality assurance?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Can it prevent bugs early?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'agile',
            title: 'Agile',
            emoji: 'üèÉ‚Äç‚ôÇÔ∏è',
            summary: 'A flexible way to build software.',
            tags: ['methodology', 'teamwork'],
            one: 'Agile is a way of working that focuses on small, quick improvements.',
            story: 'Imagine building a house room by room, getting feedback after each room, instead of finishing the whole house at once.',
            examples: [
                'Scrum meetings',
                'Delivering features in sprints',
            ],
            grown: 'A software development methodology emphasizing iterative progress and collaboration.',
            quiz: [
                { q: 'Is Agile flexible?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it involve sprints?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is feedback important in Agile?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'continuous-integration',
            title: 'Continuous Integration',
            emoji: 'üîÑ',
            summary: 'Merging code frequently to avoid conflicts.',
            tags: ['automation', 'tools'],
            one: 'Continuous integration is like syncing your phone with the cloud regularly.',
            story: 'Imagine a team writing a book together. Everyone adds their changes daily to avoid big conflicts later.',
            examples: [
                'Running automated tests on every commit',
                'Merging code changes frequently',
            ],
            grown: 'A practice where developers integrate code into a shared repository frequently, with automated testing.',
            quiz: [
                { q: 'Does it involve frequent merging?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Are automated tests part of it?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it reduce conflicts?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'refactoring',
            title: 'Refactoring',
            emoji: 'üõ†Ô∏è',
            summary: 'Improving code without changing behavior.',
            tags: ['quality', 'development'],
            one: 'Refactoring is like cleaning your room without moving out.',
            story: 'Imagine reorganizing your closet to make it easier to find things, but keeping all your clothes.',
            examples: [
                'Renaming variables for clarity',
                'Breaking a large function into smaller ones',
            ],
            grown: 'The process of restructuring existing code to improve readability and maintainability without altering functionality.',
            quiz: [
                { q: 'Does it improve code quality?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it change functionality?', options: ['Yes', 'No'], a: 'No' },
                { q: 'Is it part of maintenance?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'design-patterns',
            title: 'Design Patterns',
            emoji: 'üìê',
            summary: 'Reusable solutions to common problems.',
            tags: ['architecture', 'best-practices'],
            one: 'Design patterns are like blueprints for solving common problems in software design.',
            story: 'Imagine building a bridge. You use a proven design instead of starting from scratch. Design patterns work the same way for code.',
            examples: [
                'Singleton pattern for single instances',
                'Observer pattern for event handling',
            ],
            grown: 'Standardized solutions to recurring design problems in software engineering.',
            quiz: [
                { q: 'Are they reusable solutions?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Do they solve common problems?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is Singleton a design pattern?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'code-review',
            title: 'Code Review',
            emoji: 'üëÄ',
            summary: 'Checking code for quality and errors.',
            tags: ['collaboration', 'quality'],
            one: 'Code review is like proofreading an essay before submitting it.',
            story: 'Imagine a friend checking your homework for mistakes before you turn it in. Code reviews work the same way.',
            examples: [
                'Reviewing pull requests on GitHub',
                'Suggesting improvements to a colleague\'s code',
            ],
            grown: 'The process of systematically examining code to ensure quality, correctness, and adherence to standards.',
            quiz: [
                { q: 'Does it improve code quality?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it a collaborative process?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Can it catch bugs early?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'docker',
            title: 'Docker',
            emoji: 'üê≥',
            summary: 'Packaging apps to run anywhere.',
            tags: ['tools', 'deployment'],
            one: 'Docker is like a shipping container for your app, so it runs the same everywhere.',
            story: 'Imagine packing all your belongings into a container. No matter where it goes, everything inside stays the same. Docker does this for apps.',
            examples: [
                'Running apps in isolated containers',
                'Deploying microservices',
            ],
            grown: 'A platform for developing, shipping, and running applications in containers.',
            quiz: [
                { q: 'Does Docker use containers?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Can it run apps anywhere?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it used for deployment?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'acceptance-testing',
            title: 'Acceptance Testing',
            emoji: '‚úÖ',
            summary: 'Testing on the client side.',
            tags: ['testing', 'quality'],
            one: 'Acceptance testing ensures the software meets client requirements.',
            story: 'Imagine a chef presenting a dish to a customer to confirm it matches their order.',
            examples: [
                'Client testing a new feature before launch',
                'Validating a payment gateway integration',
            ],
            grown: 'A type of testing performed by the client to verify the software meets their requirements.',
            quiz: [
                { q: 'Is it done on the client side?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it ensure client satisfaction?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it part of quality assurance?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'alpha-testing',
            title: 'Alpha Testing',
            emoji: 'üß™',
            summary: 'Testing within the development company.',
            tags: ['testing', 'quality'],
            one: 'Alpha testing is like testing a prototype within the team before showing it to others.',
            story: 'Imagine a chef tasting their dish before serving it to customers.',
            examples: [
                'Internal testing of a new app feature',
                'Testing a game within the development team',
            ],
            grown: 'A type of testing performed internally by the development team to identify bugs before external testing.',
            quiz: [
                { q: 'Is it done internally?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it happen before beta testing?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it part of quality assurance?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'scrum',
            title: 'Scrum',
            emoji: 'üèâ',
            summary: 'An Agile framework for team collaboration.',
            tags: ['methodology', 'teamwork'],
            one: 'Scrum is like a team huddle in sports, planning the next move together.',
            story: 'Imagine a rugby team huddling to discuss their strategy before the next play.',
            examples: [
                'Daily stand-up meetings',
                'Sprint planning and retrospectives',
            ],
            grown: 'A framework within Agile methodology that emphasizes teamwork, accountability, and iterative progress.',
            quiz: [
                { q: 'Is Scrum part of Agile?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it involve sprints?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Are daily stand-ups part of Scrum?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'sdlc',
            title: 'Software Development Life Cycle (SDLC)',
            emoji: 'üîÑ',
            summary: 'The process of developing software in stages.',
            tags: ['process', 'development'],
            one: 'SDLC is like a roadmap for building software, from planning to deployment.',
            story: 'Imagine building a house: you start with a blueprint, lay the foundation, build the structure, and finally decorate it.',
            examples: [
                'Planning, designing, coding, testing, and deploying software',
                'Iterative development cycles',
            ],
            grown: 'A structured process that defines the stages of software development, from initial planning to maintenance.',
            quiz: [
                { q: 'Does SDLC include multiple stages?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it a roadmap for development?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it end with maintenance?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'backend',
            title: 'Backend',
            emoji: 'üñ•Ô∏è',
            summary: 'The server-side of software.',
            tags: ['architecture', 'development'],
            one: 'The backend is like the kitchen in a restaurant‚Äîit handles the work behind the scenes.',
            story: 'Imagine a chef preparing food in the kitchen while the waiter interacts with customers.',
            examples: [
                'Database management',
                'Server-side logic for an e-commerce site',
            ],
            grown: 'The part of software that handles server-side logic, databases, and APIs.',
            quiz: [
                { q: 'Is it the server-side of software?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it handle databases?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it visible to users?', options: ['Yes', 'No'], a: 'No' },
            ],
        },
        {
            slug: 'frontend',
            title: 'Frontend',
            emoji: 'üåê',
            summary: 'The client-side of software.',
            tags: ['architecture', 'development'],
            one: 'The frontend is like the waiter in a restaurant‚Äîit interacts directly with the customer.',
            story: 'Imagine a waiter presenting food to customers while the chef works in the kitchen.',
            examples: [
                'Website design and layout',
                'Interactive elements on a web page',
            ],
            grown: 'The part of software that users interact with directly, including UI and UX design.',
            quiz: [
                { q: 'Is it the client-side of software?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it include UI design?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it visible to users?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            "slug": "mcp-model-context-protocol",
            "title": "MCP (Model-Context-Protocol)",
            "emoji": "üîó",
            "summary": "The USB-C port for AI ‚Äî a universal standard that makes models, tools, and environments plug-and-play.",
            "tags": ["architecture", "design-patterns", "interoperability"],
            "one": "MCP is like USB-C for AI: it defines how models (devices), contexts (power/data), and protocols (wiring rules) connect so everything just works together.",
            "story": "Imagine USB-C: no matter the laptop, charger, or phone, you can plug in and it works. MCP does the same for AI ‚Äî models (players) plug into contexts (the field) and follow protocols (the rulebook), so they can cooperate smoothly.",
            "examples": [
                "Using MCP to let multiple AI models collaborate on the same task",
                "Applying MCP in microservices so tools and agents can plug in without custom glue code"
            ],
            "grown": "A universal design standard that organizes AI systems into Model (the worker), Context (the environment), and Protocol (the communication rules). This separation makes AI systems modular, scalable, and interoperable ‚Äî like a USB-C ecosystem for intelligence.",
            "quiz": [
                { "q": "Is MCP like a universal port for AI systems?", "options": ["Yes", "No"], "a": "Yes" },
                { "q": "Does MCP include communication rules (Protocol)?", "options": ["Yes", "No"], "a": "Yes" },
                { "q": "Does MCP make systems more modular and interoperable?", "options": ["Yes", "No"], "a": "Yes" }
            ]
        },
        {
            slug: 'framework',
            title: 'Framework',
            emoji: 'üèóÔ∏è',
            summary: 'Pre-built structure that helps developers build software faster.',
            tags: ['structure', 'development'],
            one: 'A framework provides a foundation and tools that make building software easier and faster.',
            story: 'Like building a house with a pre-made foundation and frame - you just add the walls and decorations.',
            examples: [
                'React for websites',
                'Django for web apps',
            ],
            grown: 'A pre-built software foundation that provides structure, libraries, and tools for developing applications.',
            quiz: [
                { q: 'Does it speed up development?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it provide structure?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it like a foundation?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'cloud-computing',
            title: 'Cloud Computing',
            emoji: '‚òÅÔ∏è',
            summary: 'Using computers and storage over the internet instead of your own computer.',
            tags: ['infrastructure', 'remote'],
            one: 'Cloud computing lets you use powerful computers and storage through the internet.',
            story: 'Like renting a super powerful computer that lives far away, but you can use it from your laptop at home.',
            examples: [
                'Google Drive storage',
                'Netflix streaming',
            ],
            grown: 'Delivery of computing services including servers, storage, and software over the internet on-demand.',
            quiz: [
                { q: 'Does it use the internet?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Are computers remote?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it like renting?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'devops',
            title: 'DevOps',
            emoji: 'ü§ù',
            summary: 'Combining development and operations teams to work together better.',
            tags: ['collaboration', 'automation'],
            one: 'DevOps brings together software developers and IT operations to work as one team.',
            story: 'Like having the people who cook and the people who serve work together in the same kitchen to make everything smoother.',
            examples: [
                'Automated deployments',
                'Continuous integration',
            ],
            grown: 'A set of practices that combines software development and IT operations to shorten development cycles and provide continuous delivery.',
            quiz: [
                { q: 'Does it combine teams?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it improve collaboration?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it like kitchen teamwork?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'scalability',
            title: 'Scalability',
            emoji: 'üìà',
            summary: 'The ability of software to handle more users or work as it grows.',
            tags: ['performance', 'growth'],
            one: 'Scalability means software can handle more users and work without breaking down.',
            story: 'Like a restaurant that can serve 10 people or 1000 people by adding more tables and staff without changing how it works.',
            examples: [
                'Handling more website visitors',
                'Processing more transactions',
            ],
            grown: 'The capability of a system to handle increased workload or accommodate growth without compromising performance.',
            quiz: [
                { q: 'Can it handle growth?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it work with more users?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it like a flexible restaurant?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        {
            slug: 'load-balancing',
            title: 'Load Balancing',
            emoji: '‚öñÔ∏è',
            summary: 'Distributing work evenly across multiple computers.',
            tags: ['distribution', 'performance'],
            one: 'Load balancing spreads work across multiple servers so no single server gets overwhelmed.',
            story: 'Like having multiple checkout lines at a store and directing customers to the shortest line to keep things moving smoothly.',
            examples: [
                'Website traffic distribution',
                'Database query distribution',
            ],
            grown: 'The process of distributing computational or networking workloads across multiple servers to optimize resource utilization.',
            quiz: [
                { q: 'Does it spread work?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Does it prevent overload?', options: ['Yes', 'No'], a: 'Yes' },
                { q: 'Is it like checkout lines?', options: ['Yes', 'No'], a: 'Yes' },
            ],
        },
        
          
    ],
};